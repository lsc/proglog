// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: log/v1/log.proto

package log_v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	log_v1 "github.com/lsc/api/log/log_v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// LogServiceName is the fully-qualified name of the LogService service.
	LogServiceName = "log.v1.LogService"
)

// LogServiceClient is a client for the log.v1.LogService service.
type LogServiceClient interface {
	Produce(context.Context, *connect_go.Request[log_v1.ProduceRequest]) (*connect_go.Response[log_v1.ProduceResponse], error)
	Consume(context.Context, *connect_go.Request[log_v1.ConsumeRequest]) (*connect_go.Response[log_v1.ConsumeResponse], error)
	ConsumeStream(context.Context, *connect_go.Request[log_v1.ConsumeRequest]) (*connect_go.ServerStreamForClient[log_v1.ConsumeResponse], error)
	ProduceStream(context.Context, *connect_go.Request[log_v1.ProduceRequest]) (*connect_go.ServerStreamForClient[log_v1.ProduceResponse], error)
}

// NewLogServiceClient constructs a client for the log.v1.LogService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLogServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) LogServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &logServiceClient{
		produce: connect_go.NewClient[log_v1.ProduceRequest, log_v1.ProduceResponse](
			httpClient,
			baseURL+"/log.v1.LogService/Produce",
			opts...,
		),
		consume: connect_go.NewClient[log_v1.ConsumeRequest, log_v1.ConsumeResponse](
			httpClient,
			baseURL+"/log.v1.LogService/Consume",
			opts...,
		),
		consumeStream: connect_go.NewClient[log_v1.ConsumeRequest, log_v1.ConsumeResponse](
			httpClient,
			baseURL+"/log.v1.LogService/ConsumeStream",
			opts...,
		),
		produceStream: connect_go.NewClient[log_v1.ProduceRequest, log_v1.ProduceResponse](
			httpClient,
			baseURL+"/log.v1.LogService/ProduceStream",
			opts...,
		),
	}
}

// logServiceClient implements LogServiceClient.
type logServiceClient struct {
	produce       *connect_go.Client[log_v1.ProduceRequest, log_v1.ProduceResponse]
	consume       *connect_go.Client[log_v1.ConsumeRequest, log_v1.ConsumeResponse]
	consumeStream *connect_go.Client[log_v1.ConsumeRequest, log_v1.ConsumeResponse]
	produceStream *connect_go.Client[log_v1.ProduceRequest, log_v1.ProduceResponse]
}

// Produce calls log.v1.LogService.Produce.
func (c *logServiceClient) Produce(ctx context.Context, req *connect_go.Request[log_v1.ProduceRequest]) (*connect_go.Response[log_v1.ProduceResponse], error) {
	return c.produce.CallUnary(ctx, req)
}

// Consume calls log.v1.LogService.Consume.
func (c *logServiceClient) Consume(ctx context.Context, req *connect_go.Request[log_v1.ConsumeRequest]) (*connect_go.Response[log_v1.ConsumeResponse], error) {
	return c.consume.CallUnary(ctx, req)
}

// ConsumeStream calls log.v1.LogService.ConsumeStream.
func (c *logServiceClient) ConsumeStream(ctx context.Context, req *connect_go.Request[log_v1.ConsumeRequest]) (*connect_go.ServerStreamForClient[log_v1.ConsumeResponse], error) {
	return c.consumeStream.CallServerStream(ctx, req)
}

// ProduceStream calls log.v1.LogService.ProduceStream.
func (c *logServiceClient) ProduceStream(ctx context.Context, req *connect_go.Request[log_v1.ProduceRequest]) (*connect_go.ServerStreamForClient[log_v1.ProduceResponse], error) {
	return c.produceStream.CallServerStream(ctx, req)
}

// LogServiceHandler is an implementation of the log.v1.LogService service.
type LogServiceHandler interface {
	Produce(context.Context, *connect_go.Request[log_v1.ProduceRequest]) (*connect_go.Response[log_v1.ProduceResponse], error)
	Consume(context.Context, *connect_go.Request[log_v1.ConsumeRequest]) (*connect_go.Response[log_v1.ConsumeResponse], error)
	ConsumeStream(context.Context, *connect_go.Request[log_v1.ConsumeRequest], *connect_go.ServerStream[log_v1.ConsumeResponse]) error
	ProduceStream(context.Context, *connect_go.Request[log_v1.ProduceRequest], *connect_go.ServerStream[log_v1.ProduceResponse]) error
}

// NewLogServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLogServiceHandler(svc LogServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/log.v1.LogService/Produce", connect_go.NewUnaryHandler(
		"/log.v1.LogService/Produce",
		svc.Produce,
		opts...,
	))
	mux.Handle("/log.v1.LogService/Consume", connect_go.NewUnaryHandler(
		"/log.v1.LogService/Consume",
		svc.Consume,
		opts...,
	))
	mux.Handle("/log.v1.LogService/ConsumeStream", connect_go.NewServerStreamHandler(
		"/log.v1.LogService/ConsumeStream",
		svc.ConsumeStream,
		opts...,
	))
	mux.Handle("/log.v1.LogService/ProduceStream", connect_go.NewServerStreamHandler(
		"/log.v1.LogService/ProduceStream",
		svc.ProduceStream,
		opts...,
	))
	return "/log.v1.LogService/", mux
}

// UnimplementedLogServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLogServiceHandler struct{}

func (UnimplementedLogServiceHandler) Produce(context.Context, *connect_go.Request[log_v1.ProduceRequest]) (*connect_go.Response[log_v1.ProduceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("log.v1.LogService.Produce is not implemented"))
}

func (UnimplementedLogServiceHandler) Consume(context.Context, *connect_go.Request[log_v1.ConsumeRequest]) (*connect_go.Response[log_v1.ConsumeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("log.v1.LogService.Consume is not implemented"))
}

func (UnimplementedLogServiceHandler) ConsumeStream(context.Context, *connect_go.Request[log_v1.ConsumeRequest], *connect_go.ServerStream[log_v1.ConsumeResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("log.v1.LogService.ConsumeStream is not implemented"))
}

func (UnimplementedLogServiceHandler) ProduceStream(context.Context, *connect_go.Request[log_v1.ProduceRequest], *connect_go.ServerStream[log_v1.ProduceResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("log.v1.LogService.ProduceStream is not implemented"))
}
